
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java_cup.runtime.*;
import java.util.ArrayList;
import Tree.Node;
import Components.ErrorS;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Terminal.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\003\000\002\004\015" +
    "\000\002\004\015\000\002\004\015\000\002\004\015\000" +
    "\002\004\015\000\002\004\015\000\002\004\012\000\002" +
    "\004\012\000\002\004\012\000\002\004\012\000\002\004" +
    "\015\000\002\005\015\000\002\005\015\000\002\005\015" +
    "\000\002\005\015\000\002\005\015\000\002\005\015\000" +
    "\002\005\012\000\002\005\012\000\002\005\012\000\002" +
    "\005\012\000\002\005\015\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\023\004\001\002\000\004\023\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\010\003\ufffd\024\ufffd\027\ufffd\001\002\000\004\004" +
    "\017\001\002\000\010\003\013\024\012\027\014\001\002" +
    "\000\004\002\000\001\002\000\004\023\010\001\002\000" +
    "\004\023\010\001\002\000\010\003\ufffe\024\ufffe\027\ufffe" +
    "\001\002\000\010\003\uffff\024\uffff\027\uffff\001\002\000" +
    "\004\030\020\001\002\000\030\007\032\010\025\011\030" +
    "\012\022\013\026\014\024\015\033\016\031\017\023\020" +
    "\021\021\027\001\002\000\004\005\251\001\002\000\004" +
    "\005\242\001\002\000\004\005\236\001\002\000\004\005" +
    "\227\001\002\000\004\005\220\001\002\000\004\005\211" +
    "\001\002\000\004\005\202\001\002\000\004\005\173\001" +
    "\002\000\004\005\167\001\002\000\004\005\160\001\002" +
    "\000\004\005\034\001\002\000\004\030\035\001\002\000" +
    "\006\022\037\025\040\001\002\000\004\024\157\001\002" +
    "\000\010\006\uffe6\024\uffe6\026\uffe6\001\002\000\004\004" +
    "\041\001\002\000\004\030\042\001\002\000\030\007\054" +
    "\010\047\011\052\012\043\013\050\014\046\015\055\016" +
    "\053\017\045\020\044\021\051\001\002\000\004\005\150" +
    "\001\002\000\004\005\144\001\002\000\004\005\140\001" +
    "\002\000\004\005\131\001\002\000\004\005\122\001\002" +
    "\000\004\005\113\001\002\000\004\005\104\001\002\000" +
    "\004\005\075\001\002\000\004\005\071\001\002\000\004" +
    "\005\062\001\002\000\004\005\056\001\002\000\004\030" +
    "\057\001\002\000\006\022\037\025\040\001\002\000\004" +
    "\026\061\001\002\000\010\006\uffeb\024\uffeb\026\uffeb\001" +
    "\002\000\004\030\063\001\002\000\006\022\037\025\040" +
    "\001\002\000\004\006\065\001\002\000\004\030\066\001" +
    "\002\000\006\022\037\025\040\001\002\000\004\026\070" +
    "\001\002\000\010\006\ufff1\024\ufff1\026\ufff1\001\002\000" +
    "\004\030\072\001\002\000\006\022\037\025\040\001\002" +
    "\000\004\026\074\001\002\000\010\006\uffea\024\uffea\026" +
    "\uffea\001\002\000\004\030\076\001\002\000\006\022\037" +
    "\025\040\001\002\000\004\006\100\001\002\000\004\030" +
    "\101\001\002\000\006\022\037\025\040\001\002\000\004" +
    "\026\103\001\002\000\010\006\uffef\024\uffef\026\uffef\001" +
    "\002\000\004\030\105\001\002\000\006\022\037\025\040" +
    "\001\002\000\004\006\107\001\002\000\004\030\110\001" +
    "\002\000\006\022\037\025\040\001\002\000\004\026\112" +
    "\001\002\000\010\006\uffe7\024\uffe7\026\uffe7\001\002\000" +
    "\004\030\114\001\002\000\006\022\037\025\040\001\002" +
    "\000\004\006\116\001\002\000\004\030\117\001\002\000" +
    "\006\022\037\025\040\001\002\000\004\026\121\001\002" +
    "\000\010\006\uffed\024\uffed\026\uffed\001\002\000\004\030" +
    "\123\001\002\000\006\022\037\025\040\001\002\000\004" +
    "\006\125\001\002\000\004\030\126\001\002\000\006\022" +
    "\037\025\040\001\002\000\004\026\130\001\002\000\010" +
    "\006\ufff0\024\ufff0\026\ufff0\001\002\000\004\030\132\001" +
    "\002\000\006\022\037\025\040\001\002\000\004\006\134" +
    "\001\002\000\004\030\135\001\002\000\006\022\037\025" +
    "\040\001\002\000\004\026\137\001\002\000\010\006\uffec" +
    "\024\uffec\026\uffec\001\002\000\004\030\141\001\002\000" +
    "\006\022\037\025\040\001\002\000\004\026\143\001\002" +
    "\000\010\006\uffe9\024\uffe9\026\uffe9\001\002\000\004\030" +
    "\145\001\002\000\006\022\037\025\040\001\002\000\004" +
    "\026\147\001\002\000\010\006\uffe8\024\uffe8\026\uffe8\001" +
    "\002\000\004\030\151\001\002\000\006\022\037\025\040" +
    "\001\002\000\004\006\153\001\002\000\004\030\154\001" +
    "\002\000\006\022\037\025\040\001\002\000\004\026\156" +
    "\001\002\000\010\006\uffee\024\uffee\026\uffee\001\002\000" +
    "\010\003\ufff6\024\ufff6\027\ufff6\001\002\000\004\030\161" +
    "\001\002\000\006\022\037\025\040\001\002\000\004\006" +
    "\163\001\002\000\004\030\164\001\002\000\006\022\037" +
    "\025\040\001\002\000\004\024\166\001\002\000\010\003" +
    "\ufffc\024\ufffc\027\ufffc\001\002\000\004\030\170\001\002" +
    "\000\006\022\037\025\040\001\002\000\004\024\172\001" +
    "\002\000\010\003\ufff5\024\ufff5\027\ufff5\001\002\000\004" +
    "\030\174\001\002\000\006\022\037\025\040\001\002\000" +
    "\004\006\176\001\002\000\004\030\177\001\002\000\006" +
    "\022\037\025\040\001\002\000\004\024\201\001\002\000" +
    "\010\003\ufffa\024\ufffa\027\ufffa\001\002\000\004\030\203" +
    "\001\002\000\006\022\037\025\040\001\002\000\004\006" +
    "\205\001\002\000\004\030\206\001\002\000\006\022\037" +
    "\025\040\001\002\000\004\024\210\001\002\000\010\003" +
    "\ufff2\024\ufff2\027\ufff2\001\002\000\004\030\212\001\002" +
    "\000\006\022\037\025\040\001\002\000\004\006\214\001" +
    "\002\000\004\030\215\001\002\000\006\022\037\025\040" +
    "\001\002\000\004\024\217\001\002\000\010\003\ufff8\024" +
    "\ufff8\027\ufff8\001\002\000\004\030\221\001\002\000\006" +
    "\022\037\025\040\001\002\000\004\006\223\001\002\000" +
    "\004\030\224\001\002\000\006\022\037\025\040\001\002" +
    "\000\004\024\226\001\002\000\010\003\ufffb\024\ufffb\027" +
    "\ufffb\001\002\000\004\030\230\001\002\000\006\022\037" +
    "\025\040\001\002\000\004\006\232\001\002\000\004\030" +
    "\233\001\002\000\006\022\037\025\040\001\002\000\004" +
    "\024\235\001\002\000\010\003\ufff7\024\ufff7\027\ufff7\001" +
    "\002\000\004\030\237\001\002\000\006\022\037\025\040" +
    "\001\002\000\004\024\241\001\002\000\010\003\ufff4\024" +
    "\ufff4\027\ufff4\001\002\000\004\030\243\001\002\000\006" +
    "\022\037\025\040\001\002\000\004\006\245\001\002\000" +
    "\004\030\246\001\002\000\006\022\037\025\040\001\002" +
    "\000\004\024\250\001\002\000\010\003\ufff9\024\ufff9\027" +
    "\ufff9\001\002\000\004\030\252\001\002\000\006\022\037" +
    "\025\040\001\002\000\004\024\254\001\002\000\010\003" +
    "\ufff3\024\ufff3\027\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\002\004\001\001\000\006\003\010\004" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\015\001\001\000\004\004\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\252" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Scanner s;
    public Parser(Scanner s){
        super(s);
        this.s = s;
    }
    public ArrayList<Node> trees = new ArrayList<Node>();
    public ArrayList<ErrorS> errors = new ArrayList<ErrorS>();

    public void syntax_error(Symbol symbol){
        errors.add(new ErrorS(symbol.left,symbol.right,symbol.value,Terminal.terminalNames[symbol.sym]));
    }
    public void unrecovered_syntax_error(Symbol symbol) throws java.lang.Exception{
        errors.add(new ErrorS(symbol.left,symbol.right,symbol.value,Terminal.terminalNames[symbol.sym],true));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= TK_KeyO OPERATIONS TK_KeyC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OPERATIONS ::= OPERATIONS error OPERATION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPERATIONS ::= OPERATIONS TK_Comma OPERATION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trees.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPERATIONS ::= OPERATION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trees.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPERATION ::= TK_KeyO PR_Operacion TK_Colon PR_Suma PR_Valor1 TK_Colon VALOR PR_Valor2 TK_Colon VALOR TK_KeyC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Suma",a.value + b.value);RESULT.left = a;RESULT.right = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPERATION ::= TK_KeyO PR_Operacion TK_Colon PR_Resta PR_Valor1 TK_Colon VALOR PR_Valor2 TK_Colon VALOR TK_KeyC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Resta",a.value - b.value);RESULT.left = a;RESULT.right = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPERATION ::= TK_KeyO PR_Operacion TK_Colon PR_Multiplicacion PR_Valor1 TK_Colon VALOR PR_Valor2 TK_Colon VALOR TK_KeyC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Multiplicacion",a.value * b.value);RESULT.left = a;RESULT.right = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPERATION ::= TK_KeyO PR_Operacion TK_Colon PR_Division PR_Valor1 TK_Colon VALOR PR_Valor2 TK_Colon VALOR TK_KeyC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Division",a.value / b.value);RESULT.left = a;RESULT.right = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPERATION ::= TK_KeyO PR_Operacion TK_Colon PR_Potencia PR_Valor1 TK_Colon VALOR PR_Valor2 TK_Colon VALOR TK_KeyC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Potencia",Math.pow(a.value,b.value));RESULT.left = a;RESULT.right = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPERATION ::= TK_KeyO PR_Operacion TK_Colon PR_Raiz PR_Valor1 TK_Colon VALOR PR_Valor2 TK_Colon VALOR TK_KeyC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Raiz",Math.pow(a.value,1 / b.value));RESULT.left = a;RESULT.right = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPERATION ::= TK_KeyO PR_Operacion TK_Colon PR_Inverso PR_Valor1 TK_Colon VALOR TK_KeyC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Inverso",1 / a.value);RESULT.left = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPERATION ::= TK_KeyO PR_Operacion TK_Colon PR_Seno PR_Valor1 TK_Colon VALOR TK_KeyC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Seno",Math.sin(a.value * Math.PI / 180));RESULT.left = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPERATION ::= TK_KeyO PR_Operacion TK_Colon PR_Coseno PR_Valor1 TK_Colon VALOR TK_KeyC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Coseno",Math.cos(a.value * Math.PI / 180));RESULT.left = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPERATION ::= TK_KeyO PR_Operacion TK_Colon PR_Tangente PR_Valor1 TK_Colon VALOR TK_KeyC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Tangente",Math.tan(a.value * Math.PI / 180));RESULT.left = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPERATION ::= TK_KeyO PR_Operacion TK_Colon PR_Mod PR_Valor1 TK_Colon VALOR PR_Valor2 TK_Colon VALOR TK_KeyC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Mod",a.value % b.value);RESULT.left = a;RESULT.right = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VALOR ::= TK_BrackO PR_Operacion TK_Colon PR_Suma PR_Valor1 TK_Colon VALOR PR_Valor2 TK_Colon VALOR TK_BrackC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Suma",a.value + b.value);RESULT.left = a;RESULT.right = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VALOR ::= TK_BrackO PR_Operacion TK_Colon PR_Resta PR_Valor1 TK_Colon VALOR PR_Valor2 TK_Colon VALOR TK_BrackC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Resta",a.value - b.value);RESULT.left = a;RESULT.right = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VALOR ::= TK_BrackO PR_Operacion TK_Colon PR_Multiplicacion PR_Valor1 TK_Colon VALOR PR_Valor2 TK_Colon VALOR TK_BrackC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Multiplicacion",a.value * b.value);RESULT.left = a;RESULT.right = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VALOR ::= TK_BrackO PR_Operacion TK_Colon PR_Division PR_Valor1 TK_Colon VALOR PR_Valor2 TK_Colon VALOR TK_BrackC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Division",a.value / b.value);RESULT.left = a;RESULT.right = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VALOR ::= TK_BrackO PR_Operacion TK_Colon PR_Potencia PR_Valor1 TK_Colon VALOR PR_Valor2 TK_Colon VALOR TK_BrackC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Potencia",Math.pow(a.value,b.value));RESULT.left = a;RESULT.right = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VALOR ::= TK_BrackO PR_Operacion TK_Colon PR_Raiz PR_Valor1 TK_Colon VALOR PR_Valor2 TK_Colon VALOR TK_BrackC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Raiz",Math.pow(a.value,1 / b.value));RESULT.left = a;RESULT.right = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALOR ::= TK_BrackO PR_Operacion TK_Colon PR_Inverso PR_Valor1 TK_Colon VALOR TK_BrackC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Inverso",1 / a.value);RESULT.left = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VALOR ::= TK_BrackO PR_Operacion TK_Colon PR_Seno PR_Valor1 TK_Colon VALOR TK_BrackC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Seno",Math.sin(a.value * Math.PI / 180));RESULT.left = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALOR ::= TK_BrackO PR_Operacion TK_Colon PR_Coseno PR_Valor1 TK_Colon VALOR TK_BrackC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Coseno",Math.cos(a.value * Math.PI / 180));RESULT.left = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALOR ::= TK_BrackO PR_Operacion TK_Colon PR_Tangente PR_Valor1 TK_Colon VALOR TK_BrackC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Tangente",Math.tan(a.value * Math.PI / 180));RESULT.left = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR ::= TK_BrackO PR_Operacion TK_Colon PR_Mod PR_Valor1 TK_Colon VALOR PR_Valor2 TK_Colon VALOR TK_BrackC 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Node("Mod",a.value % b.value);RESULT.left = a;RESULT.right = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR ::= TK_Num 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Node(Double.parseDouble(a));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
